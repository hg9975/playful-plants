{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport PhotoSwipe from 'photoswipe/dist/photoswipe';\nimport PhotoSwipeUI_Default from 'photoswipe/dist/photoswipe-ui-default';\nimport 'photoswipe/dist/photoswipe.css';\nimport 'photoswipe/dist/default-skin/default-skin.css';\nexport default {\n  props: {\n    items: {\n      default: [{\n        src: 'http://via.placeholder.com/600x400',\n        thumbnail: 'http://via.placeholder.com/64x64',\n        w: 600,\n        h: 400,\n        alt: 'some numbers on a grey background'\n      }, {\n        src: 'http://via.placeholder.com/1200x900',\n        thumbnail: 'http://via.placeholder.com/64x64',\n        w: 1200,\n        h: 900\n      }],\n      type: Array\n    },\n    options: {\n      default: function _default() {\n        return {};\n      },\n      type: Object\n    },\n    singleThumbnail: {\n      type: Boolean,\n      default: false\n    },\n    nbThumbnailsDisplayed: {\n      default: -1,\n      type: Number\n    }\n  },\n  data: function data() {\n    return {\n      pswp: null,\n      angle: 0\n    };\n  },\n  mounted: function mounted() {\n    var that = this;\n\n    var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {\n      // parse slide data (url, title, size ...) from DOM elements\n      // (children of gallerySelector)\n      var parseThumbnailElements = function parseThumbnailElements(el) {\n        var thumbElements = el.childNodes,\n            numNodes = thumbElements.length,\n            items = [],\n            figureEl,\n            linkEl,\n            size,\n            item;\n\n        for (var i = 0; i < numNodes; i++) {\n          figureEl = thumbElements[i]; // <figure> element\n          // include only element nodes\n\n          if (figureEl.nodeType !== 1) {\n            continue;\n          }\n\n          linkEl = figureEl.children[0]; // <a> element\n\n          size = linkEl.getAttribute('data-size').split('x'); // create slide object\n\n          item = {\n            src: linkEl.getAttribute('href'),\n            w: parseInt(size[0], 10),\n            h: parseInt(size[1], 10),\n            title: linkEl.getAttribute('title')\n          };\n\n          if (figureEl.children.length > 1) {\n            // <figcaption> content\n            item.title = figureEl.children[1].innerHTML;\n          }\n\n          if (linkEl.children.length > 0) {\n            // <img> thumbnail element, retrieving thumbnail url\n            item.msrc = linkEl.children[0].getAttribute('src');\n          }\n\n          item.el = figureEl; // save link to element for getThumbBoundsFn\n\n          items.push(item);\n        }\n\n        return items;\n      }; // find nearest parent element\n\n\n      var closest = function closest(el, fn) {\n        return el && (fn(el) ? el : closest(el.parentNode, fn));\n      }; // triggers when user clicks on thumbnail\n\n\n      var onThumbnailsClick = function onThumbnailsClick(e) {\n        e = e || window.event;\n        e.preventDefault ? e.preventDefault() : e.returnValue = false;\n        var eTarget = e.target || e.srcElement; // find root element of slide\n\n        var clickedListItem = closest(eTarget, function (el) {\n          return el.tagName && el.tagName.toUpperCase() === 'FIGURE';\n        });\n\n        if (!clickedListItem) {\n          return;\n        } // find index of clicked item by looping through all child nodes\n        // alternatively, you may define index via data- attribute\n\n\n        var clickedGallery = clickedListItem.parentNode,\n            childNodes = clickedListItem.parentNode.childNodes,\n            numChildNodes = childNodes.length,\n            nodeIndex = 0,\n            index;\n\n        for (var i = 0; i < numChildNodes; i++) {\n          if (childNodes[i].nodeType !== 1) {\n            continue;\n          }\n\n          if (childNodes[i] === clickedListItem) {\n            index = nodeIndex;\n            break;\n          }\n\n          nodeIndex++;\n        }\n\n        if (index >= 0) {\n          // open PhotoSwipe if valid index found\n          openPhotoSwipe(index, clickedGallery);\n        }\n\n        return false;\n      }; // parse picture index and gallery index from URL (#&pid=1&gid=2)\n\n\n      var photoswipeParseHash = function photoswipeParseHash() {\n        var hash = window.location.hash.substring(1),\n            params = {};\n\n        if (hash.length < 5) {\n          return params;\n        }\n\n        var vars = hash.split('&');\n\n        for (var i = 0; i < vars.length; i++) {\n          if (!vars[i]) {\n            continue;\n          }\n\n          var pair = vars[i].split('=');\n\n          if (pair.length < 2) {\n            continue;\n          }\n\n          params[pair[0]] = pair[1];\n        }\n\n        if (params.gid) {\n          params.gid = parseInt(params.gid, 10);\n        }\n\n        return params;\n      };\n\n      var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {\n        var pswpElement = galleryElement.parentElement.querySelector('.pswp'),\n            gallery,\n            options,\n            items;\n        items = parseThumbnailElements(galleryElement); // define options (if needed)\n\n        options = {\n          // define gallery index (for URL)\n          galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n          getThumbBoundsFn: function getThumbBoundsFn(index) {\n            // See Options -> getThumbBoundsFn section of documentation for more info\n            var thumbnail = items[index].el.getElementsByTagName('img')[0],\n                // find thumbnail\n            pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n                rect = thumbnail.getBoundingClientRect();\n            return {\n              x: rect.left,\n              y: rect.top + pageYScroll,\n              w: rect.width\n            };\n          }\n        }; // PhotoSwipe opened from URL\n\n        if (fromURL) {\n          if (options.galleryPIDs) {\n            // parse real index when custom PIDs are used\n            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n            for (var j = 0; j < items.length; j++) {\n              if (items[j].pid == index) {\n                options.index = j;\n                break;\n              }\n            }\n          } else {\n            // in URL indexes start from 1\n            options.index = parseInt(index, 10) - 1;\n          }\n        } else {\n          options.index = parseInt(index, 10);\n        } // exit if index not found\n\n\n        if (isNaN(options.index)) {\n          return;\n        }\n\n        if (disableAnimation) {\n          options.showAnimationDuration = 0;\n        } // Pass data to PhotoSwipe and initialize it\n\n\n        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, Object.assign(options, that.options));\n        gallery.listen('gettingData', function (index, item) {\n          if (item.w < 1 || item.h < 1) {\n            // unknown size\n            var img = new Image();\n\n            img.onload = function () {\n              // will get size after load\n              item.w = this.width; // set image width\n\n              item.h = this.height; // set image height\n\n              gallery.invalidateCurrItems(); // reinit Items\n\n              gallery.updateSize(true); // reinit Items\n            };\n\n            img.src = item.src; // let's download image\n          }\n        });\n        gallery.init();\n        that.pswp = gallery; // trigger open event after swiper is opened\n\n        that.$emit('open'); // trigger close event after swiper is closed\n\n        gallery.listen('destroy', function () {\n          return that.$emit('close');\n        });\n      }; // loop through all gallery elements and bind events\n\n\n      var galleryElements = document.querySelectorAll(gallerySelector);\n\n      for (var i = 0, l = galleryElements.length; i < l; i++) {\n        galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n        galleryElements[i].onclick = onThumbnailsClick;\n      } // Parse URL and open gallery if it contains #&pid=3&gid=1\n\n\n      var hashData = photoswipeParseHash();\n\n      if (hashData.pid && hashData.gid) {\n        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n      }\n    };\n\n    initPhotoSwipeFromDOM('.my-gallery');\n  },\n  methods: {\n    rotate: function rotate(newAngle) {\n      var _this = this;\n\n      this.angle = this.angle + newAngle;\n      this.$el.querySelectorAll('.pswp__img').forEach(function (i) {\n        return i.style.transform = \"rotate(\".concat(_this.angle, \"deg)\");\n      });\n    },\n    resetAngle: function resetAngle() {\n      var _this2 = this;\n\n      this.angle = 0;\n      this.$el.querySelectorAll('.pswp__img').forEach(function (i) {\n        return i.style.transform = \"rotate(\".concat(_this2.angle, \"deg)\");\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;AACA;AACA;AACA;AAEA;AACAA;AACAC;AACAC,gBACA;AACAC,iDADA;AAEAC,qDAFA;AAGAC,cAHA;AAIAC,cAJA;AAKAC;AALA,OADA,EAQA;AACAJ,kDADA;AAEAC,qDAFA;AAGAC,eAHA;AAIAC;AAJA,OARA,CADA;AAgBAE;AAhBA,KADA;AAmBAC;AACAP;AAAA;AAAA,OADA;AAEAM;AAFA,KAnBA;AAuBAE;AACAF,mBADA;AAEAN;AAFA,KAvBA;AA2BAS;AACAT,iBADA;AAEAM;AAFA;AA3BA,GADA;AAiCAI,MAjCA,kBAiCA;AACA;AACAC,gBADA;AAEAC;AAFA;AAIA,GAtCA;AAuCAC,SAvCA,qBAuCA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAAA,YACAC,+BADA;AAAA,YAEAf,UAFA;AAAA,YAGAgB,QAHA;AAAA,YAIAC,MAJA;AAAA,YAKAC,IALA;AAAA,YAMAC,IANA;;AAQA;AAEAH,sCAFA,CAEA;AAEA;;AACA;AACA;AACA;;AAEAC,wCATA,CASA;;AAEAC,6DAXA,CAaA;;AACAC;AACAjB,4CADA;AAEAE,oCAFA;AAGAC,oCAHA;AAIAe;AAJA;;AAQA;AACA;AACAD;AACA;;AAEA;AACA;AACAA;AACA;;AAEAA,6BAhCA,CAgCA;;AACAnB;AACA;;AAEA;AACA,OA9CA,CAJA,CAoDA;;;AACA;AACA;AACA,OAFA,CArDA,CAyDA;;;AACA;AACAqB;AACAA;AAEA,+CAJA,CAMA;;AACA;AACA;AACA,SAFA;;AAIA;AACA;AACA,SAbA,CAeA;AACA;;;AACA;AAAA,YACAC,kDADA;AAAA,YAEAC,iCAFA;AAAA,YAGAC,aAHA;AAAA,YAIAC,KAJA;;AAMA;AACA;AACA;AACA;;AAEA;AACAA;AACA;AACA;;AACAD;AACA;;AAGA;AACA;AACAE;AACA;;AACA;AACA,OAzCA,CA1DA,CAqGA;;;AACA;AACA;AAAA,YACAC,WADA;;AAGA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;;AACAA;AACA;;AAEA;AACAA;AACA;;AAEA;AACA,OAzBA;;AA2BA;AACA;AAAA,YACAC,OADA;AAAA,YAEApB,OAFA;AAAA,YAGAR,KAHA;AAKAA,uDANA,CAQA;;AACAQ;AAEA;AACAqB,kEAHA;AAKAC;AACA;AACA;AAAA;AACAC,kFADA;AAAA,gBAEAC,wCAFA;AAIA;AAAAC;AAAAC;AAAA9B;AAAA;AACA;AAZA,UATA,CAyBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACAI;AACA;AACA;AACA;AACA,WATA,MASA;AACA;AACAA;AACA;AACA,SAdA,MAcA;AACAA;AACA,SA1CA,CA4CA;;;AACA;AACA;AACA;;AAEA;AACAA;AACA,SAnDA,CAqDA;;;AACAoB;AACAA;AACA;AAAA;AACA;;AACAO;AAAA;AACAhB,kCADA,CACA;;AACAA,mCAFA,CAEA;;AACAS,4CAHA,CAGA;;AACAA,uCAJA,CAIA;AACA,aALA;;AAMAO,+BARA,CAQA;AACA;AACA,SAXA;AAYAP;AACAQ,4BApEA,CAsEA;;AACAA,2BAvEA,CAyEA;;AACAR;AAAA;AAAA;AACA,OA3EA,CAjIA,CA8MA;;;AACA;;AAEA;AACAS;AACAA;AACA,OApNA,CAsNA;;;AACA;;AACA;AACAX;AACA;AACA,KA3NA;;AA6NAY;AAEA,GAxQA;AAyQAC;AACAC;AAAA;;AACA;AACA;AAAA;AAAA;AACA,KAJA;AAKAC;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AARA;AAzQA","names":["props","items","default","src","thumbnail","w","h","alt","type","options","singleThumbnail","nbThumbnailsDisplayed","data","pswp","angle","mounted","numNodes","figureEl","linkEl","size","item","title","e","childNodes","numChildNodes","nodeIndex","index","openPhotoSwipe","params","gallery","galleryUID","getThumbBoundsFn","pageYScroll","rect","x","y","img","that","galleryElements","initPhotoSwipeFromDOM","methods","rotate","resetAngle"],"sourceRoot":"node_modules/vue-picture-swipe/src","sources":["VuePictureSwipe.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"my-gallery\" itemscope itemtype=\"http://schema.org/ImageGallery\">\n\n      <figure\n          class=\"gallery-thumbnail\"\n          v-show=\"index === 0 || !singleThumbnail\"\n          itemprop=\"associatedMedia\"\n          itemscope\n          itemtype=\"http://schema.org/ImageObject\"\n          v-for=\"(item, index) in items\" :src=\"item.src\"\n          v-bind:key=\"index\">\n        <a \n          v-show=\"nbThumbnailsDisplayed === -1 || index < nbThumbnailsDisplayed\"\n          :href=\"item.src\" itemprop=\"contentUrl\" :data-size=\"'' + item.w + 'x' + item.h\" :title=\"item.title\">\n          <img :src=\"item.thumbnail\" :alt=\"item.alt\" itemprop=\"thumbnail\"/>\n        </a>\n      </figure>\n    </div>\n\n    <div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n      <div class=\"pswp__bg\"></div>\n      <div class=\"pswp__scroll-wrap\">\n        <div class=\"pswp__container\">\n          <div class=\"pswp__item\"></div>\n          <div class=\"pswp__item\"></div>\n          <div class=\"pswp__item\"></div>\n        </div>\n        <div class=\"pswp__ui pswp__ui--hidden\">\n\n          <div class=\"pswp__top-bar\">\n            <div class=\"pswp__counter\"></div>\n            <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"></button>\n\n            <button class=\"pswp__button pswp__button--rotate pswp__button--rotate--left\" title=\"Rotate left\" v-if=\"options.rotationOn\" @click=\"rotate(-90)\"></button>\n            <button class=\"pswp__button pswp__button--rotate pswp__button--rotate--right\" title=\"Rotate right\" v-if=\"options.rotationOn\" @click=\"rotate(90)\"></button>\n\n            <button class=\"pswp__button pswp__button--share\" title=\"Share\"></button>\n            <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"></button>\n            <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"></button>\n            <div class=\"pswp__preloader\">\n              <div class=\"pswp__preloader__icn\">\n                <div class=\"pswp__preloader__cut\">\n                  <div class=\"pswp__preloader__donut\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n            <div class=\"pswp__share-tooltip\"></div>\n          </div>\n          <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\" @click='resetAngle'>\n          </button>\n          <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\" @click='resetAngle'>\n          </button>\n          <div class=\"pswp__caption\">\n            <div class=\"pswp__caption__center\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import PhotoSwipe from 'photoswipe/dist/photoswipe'\n  import PhotoSwipeUI_Default from 'photoswipe/dist/photoswipe-ui-default'\n  import 'photoswipe/dist/photoswipe.css'\n  import 'photoswipe/dist/default-skin/default-skin.css'\n\n  export default {\n    props: {\n      items: {\n        default: [\n          {\n            src: 'http://via.placeholder.com/600x400',\n            thumbnail: 'http://via.placeholder.com/64x64',\n            w: 600,\n            h: 400,\n            alt: 'some numbers on a grey background'\n          },\n          {\n            src: 'http://via.placeholder.com/1200x900',\n            thumbnail: 'http://via.placeholder.com/64x64',\n            w: 1200,\n            h: 900\n          }\n        ],\n        type: Array\n      },\n      options: {\n        default: () => ({}),\n        type: Object\n      },\n      singleThumbnail :{\n        type : Boolean,\n        default: false\n      },\n      nbThumbnailsDisplayed: {\n      default: -1,\n      type: Number,\n      },\n    },\n    data() {\n      return {\n        pswp: null,\n        angle: 0\n      };\n    },\n    mounted() {\n      let that = this;\n      let initPhotoSwipeFromDOM = function (gallerySelector) {\n\n        // parse slide data (url, title, size ...) from DOM elements\n        // (children of gallerySelector)\n        let parseThumbnailElements = function (el) {\n          let thumbElements = el.childNodes,\n            numNodes = thumbElements.length,\n            items = [],\n            figureEl,\n            linkEl,\n            size,\n            item;\n\n          for (let i = 0; i < numNodes; i++) {\n\n            figureEl = thumbElements[i]; // <figure> element\n\n            // include only element nodes\n            if (figureEl.nodeType !== 1) {\n              continue;\n            }\n\n            linkEl = figureEl.children[0]; // <a> element\n\n            size = linkEl.getAttribute('data-size').split('x');\n\n            // create slide object\n            item = {\n              src: linkEl.getAttribute('href'),\n              w: parseInt(size[0], 10),\n              h: parseInt(size[1], 10),\n              title: linkEl.getAttribute('title')\n            };\n\n\n            if (figureEl.children.length > 1) {\n              // <figcaption> content\n              item.title = figureEl.children[1].innerHTML;\n            }\n\n            if (linkEl.children.length > 0) {\n              // <img> thumbnail element, retrieving thumbnail url\n              item.msrc = linkEl.children[0].getAttribute('src');\n            }\n\n            item.el = figureEl; // save link to element for getThumbBoundsFn\n            items.push(item);\n          }\n\n          return items;\n        };\n\n        // find nearest parent element\n        let closest = function closest(el, fn) {\n          return el && (fn(el) ? el : closest(el.parentNode, fn));\n        };\n\n        // triggers when user clicks on thumbnail\n        let onThumbnailsClick = function (e) {\n          e = e || window.event;\n          e.preventDefault ? e.preventDefault() : e.returnValue = false;\n\n          let eTarget = e.target || e.srcElement;\n\n          // find root element of slide\n          let clickedListItem = closest(eTarget, function (el) {\n            return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');\n          });\n\n          if (!clickedListItem) {\n            return;\n          }\n\n          // find index of clicked item by looping through all child nodes\n          // alternatively, you may define index via data- attribute\n          let clickedGallery = clickedListItem.parentNode,\n            childNodes = clickedListItem.parentNode.childNodes,\n            numChildNodes = childNodes.length,\n            nodeIndex = 0,\n            index;\n\n          for (let i = 0; i < numChildNodes; i++) {\n            if (childNodes[i].nodeType !== 1) {\n              continue;\n            }\n\n            if (childNodes[i] === clickedListItem) {\n              index = nodeIndex;\n              break;\n            }\n            nodeIndex++;\n          }\n\n\n          if (index >= 0) {\n            // open PhotoSwipe if valid index found\n            openPhotoSwipe(index, clickedGallery);\n          }\n          return false;\n        };\n\n        // parse picture index and gallery index from URL (#&pid=1&gid=2)\n        let photoswipeParseHash = function () {\n          let hash = window.location.hash.substring(1),\n            params = {};\n\n          if (hash.length < 5) {\n            return params;\n          }\n\n          let vars = hash.split('&');\n          for (let i = 0; i < vars.length; i++) {\n            if (!vars[i]) {\n              continue;\n            }\n            let pair = vars[i].split('=');\n            if (pair.length < 2) {\n              continue;\n            }\n            params[pair[0]] = pair[1];\n          }\n\n          if (params.gid) {\n            params.gid = parseInt(params.gid, 10);\n          }\n\n          return params;\n        };\n\n        let openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {\n          let pswpElement = galleryElement.parentElement.querySelector('.pswp'),\n            gallery,\n            options,\n            items;\n\n          items = parseThumbnailElements(galleryElement);\n\n          // define options (if needed)\n          options = {\n\n            // define gallery index (for URL)\n            galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n\n            getThumbBoundsFn: function (index) {\n              // See Options -> getThumbBoundsFn section of documentation for more info\n              let thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail\n                pageYScroll = window.pageYOffset || document.documentElement.scrollTop,\n                rect = thumbnail.getBoundingClientRect();\n\n              return {x: rect.left, y: rect.top + pageYScroll, w: rect.width};\n            }\n\n          };\n\n          // PhotoSwipe opened from URL\n          if (fromURL) {\n            if (options.galleryPIDs) {\n              // parse real index when custom PIDs are used\n              // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n              for (let j = 0; j < items.length; j++) {\n                if (items[j].pid == index) {\n                  options.index = j;\n                  break;\n                }\n              }\n            } else {\n              // in URL indexes start from 1\n              options.index = parseInt(index, 10) - 1;\n            }\n          } else {\n            options.index = parseInt(index, 10);\n          }\n\n          // exit if index not found\n          if (isNaN(options.index)) {\n            return;\n          }\n\n          if (disableAnimation) {\n            options.showAnimationDuration = 0;\n          }\n\n          // Pass data to PhotoSwipe and initialize it\n          gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, Object.assign(options, that.options));\n          gallery.listen('gettingData', function(index, item) {\n            if (item.w < 1 || item.h < 1) { // unknown size\n              let img = new Image();\n              img.onload = function() { // will get size after load\n                item.w = this.width; // set image width\n                item.h = this.height; // set image height\n                gallery.invalidateCurrItems(); // reinit Items\n                gallery.updateSize(true); // reinit Items\n              };\n              img.src = item.src; // let's download image\n            }\n          });\n          gallery.init();\n          that.pswp = gallery;\n\n          // trigger open event after swiper is opened\n          that.$emit('open')\n\n          // trigger close event after swiper is closed\n          gallery.listen('destroy', () => that.$emit('close'))\n        };\n\n        // loop through all gallery elements and bind events\n        let galleryElements = document.querySelectorAll(gallerySelector);\n\n        for (let i = 0, l = galleryElements.length; i < l; i++) {\n          galleryElements[i].setAttribute('data-pswp-uid', i + 1);\n          galleryElements[i].onclick = onThumbnailsClick;\n        }\n\n        // Parse URL and open gallery if it contains #&pid=3&gid=1\n        let hashData = photoswipeParseHash();\n        if (hashData.pid && hashData.gid) {\n          openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);\n        }\n      };\n\n      initPhotoSwipeFromDOM('.my-gallery');\n\n    },\n    methods: {\n      rotate: function(newAngle) {\n        this.angle = this.angle + newAngle\n        this.$el.querySelectorAll('.pswp__img').forEach(i => i.style.transform = `rotate(${this.angle}deg)`)\n      },\n      resetAngle: function() {\n        this.angle = 0\n        this.$el.querySelectorAll('.pswp__img').forEach(i => i.style.transform = `rotate(${this.angle}deg)`)\n      },\n    }\n  }\n</script>\n<style scoped>\n  .pswp__top-bar {\n    text-align: right;\n  }\n  .pswp__caption__center {\n    text-align: center\n  }\n  .pswp__button--rotate {\n    background: url(./icons/rotate.png) 0 0 no-repeat;\n    background-size: 62px 24px;\n  }\n  .pswp__button--rotate--left {\n    background-position: 8px 10px;\n  }\n  .pswp__button--rotate--right {\n    background-position: -26px 10px;\n  }\n  .gallery-thumbnail {\n    display: inline;\n    margin: 5px;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}